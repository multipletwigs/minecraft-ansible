- name: Get system architecture
  command: dpkg --print-architecture
  register: system_arch
  changed_when: false

- name: Download Cloudflared for Ubuntu (ARM64)
  get_url:
    url: https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64.deb
    dest: /tmp/cloudflared.deb
    mode: "0644"
  when: system_arch.stdout == "arm64"

- name: Download Cloudflared for Ubuntu (AMD64)
  get_url:
    url: https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
    dest: /tmp/cloudflared.deb
    mode: "0644"
  when: system_arch.stdout == "amd64"

- name: Install Cloudflared on Ubuntu
  apt:
    deb: /tmp/cloudflared.deb
    state: present

- name: Create .cloudflared directory
  file:
    path: "~/.cloudflared"
    state: directory
    mode: "0755"

- name: Copy Cloudflare cert.pem to server
  copy:
    src: "{{ cert_local_path }}"
    dest: "{{ cloudflared_config_dir }}/cert.pem"

- name: Check if Cloudflare Tunnel exists
  shell: cloudflared tunnel list | grep -w "{{ tunnel_name }}"
  register: tunnel_check
  changed_when: false
  failed_when: false

- name: Create Cloudflare Tunnel
  shell: cloudflared tunnel create {{ tunnel_name }}
  args:
    creates: "{{ cloudflared_config_dir }}/{{ tunnel_name }}.json"
  register: tunnel_created
  when: tunnel_check.rc != 0

- name: Extract Tunnel ID
  shell: cloudflared tunnel list | grep {{ tunnel_name }} | awk '{print $1}'
  register: tunnel_id
  changed_when: false
  when: tunnel_created.changed

- name: Create Cloudflared config file
  template:
    src: ../templates/cloudflared_config.yml.j2
    dest: "{{ cloudflared_config_dir }}/config.yml"
    mode: "0600"
  register: config_updated
  when: tunnel_created is defined and (tunnel_created.changed or config_refresh|default(false))

- name: Create DNS records for the tunnel
  shell: cloudflared tunnel route dns {{ tunnel_name }} {{ item.hostname }}
  loop: "{{ cloudflared_services }}"
  register: dns_result
  changed_when: "'Added' in dns_result.stdout"
  when: tunnel_created is defined and (tunnel_created.changed or config_updated.changed)

- name: Install Cloudflared as a service
  shell: cloudflared service install
  args:
    creates: /etc/systemd/system/cloudflared.service

- name: Ensure Cloudflared service is running and enabled
  systemd:
    name: cloudflared
    state: started
    enabled: yes
    daemon_reload: yes

- name: Show connection information
  debug:
    msg: |
      Cloudflare Tunnel has been set up!

      Players can now connect to your Minecraft server using:
      {{ tunnel_domain }}

      No port needed, just the domain name in their Minecraft client.

      To check tunnel status, run:
      sudo journalctl -u cloudflared
